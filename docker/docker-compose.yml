version: '3.8'

services:
  frontend:
    build:
      context: ../Frontend  # Path to your frontend directory
      dockerfile: Dockerfile
    container_name: classroom-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:80
      - VITE_API_URL=http://localhost:80
    ports:
      - "80:80"  # Run the frontend on port 80
    depends_on:
      - api

  api:
    build:
      context: ..                   # Use the project root as build context
      dockerfile: docker/Dockerfile   # Path to your Dockerfile relative to the project root
    container_name: classroom-api
    environment:
      # Database connection
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=myclassroomdb
      - DB_USER=avnadmin
      - DB_PASSWORD=yourpassword
      
      # MinIO connection
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_EXTERNAL_ENDPOINT=http://localhost/minio
      - MINIO_CONSOLE_ENDPOINT=http://minio:9090
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadminpassword
      
    
    ports:
      - "3001:3000"  # Change to avoid port conflict
    depends_on:
      - db
      - minio
  

  db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: avnadmin
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: myclassroomdb
      TZ: 'GMT+5:30'
      PGTZ: 'GMT+5:30'
    ports:
      - "5432:5432"
    volumes:
      - ../db-init:/docker-entrypoint-initdb.d  # Mount your SQL initialization scripts

  minio:
    image: quay.io/minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadminpassword
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000"  # S3 API port
      - "9090:9090"  # MinIO Console port
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  minio-init:
    image: quay.io/minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      # Configure MinIO host
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadminpassword;
      
      # Create bucket (if it doesn't already exist)
      /usr/bin/mc mb myminio/classroom-uploads --ignore-existing;
      
      # Set the bucket to private
      /usr/bin/mc policy set private myminio/classroom-uploads;
      
      # Create CORS configuration to allow all domains for GET, PUT, and POST requests
       echo '{\"CORSRules\":[{\"AllowedOrigins\":[\"*\"],\"AllowedMethods\":[\"GET\",\"PUT\",\"POST\"],\"AllowedHeaders\":[\"*\"],\"ExposeHeaders\":[\"ETag\"],\"MaxAgeSeconds\":3000}]}' > /tmp/cors.json;
      
      # Apply CORS configuration to the bucket
      /usr/bin/mc cors set myminio/classroom-uploads /tmp/cors.json || echo 'CORS setup attempted, continuing regardless of outcome';
      
      exit 0;
      "

volumes:
  minio_data:
