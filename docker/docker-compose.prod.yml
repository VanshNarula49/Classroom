version: '3.8'

services:
  nginx-proxy:
    image: nginx:latest
    container_name: classroom-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../Frontend/dist:/usr/share/nginx/html/frontend # Mount built frontend assets
      - ./nginx-prod/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - api
      - minio
    environment:
      - NGINX_DOMAIN=${DOMAIN_NAME} # Will be set by deploy script
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: classroom-api-prod
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-myclassroomdb}
      - DB_USER=${DB_USER:-avnadmin}
      - DB_PASSWORD=${DB_PASSWORD:-yourpassword}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_EXTERNAL_ENDPOINT=https://${DOMAIN_NAME}/minio # Crucial for presigned URLs
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadminpassword}
      - JWT_SECRET=${JWT_SECRET:-your-production-jwt-secret} # Set a strong secret
    depends_on:
      - db
      - minio
    restart: unless-stopped

  db:
    image: postgres:13
    container_name: postgres-db-prod
    environment:
      POSTGRES_USER: ${DB_USER:-avnadmin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-yourpassword}
      POSTGRES_DB: ${DB_NAME:-myclassroomdb}
      TZ: 'GMT+5:30'
      PGTZ: 'GMT+5:30'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ../db-init:/docker-entrypoint-initdb.d
    restart: unless-stopped

  minio:
    image: quay.io/minio/minio
    container_name: minio-prod
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadminpassword}
      MINIO_DOMAIN: ${DOMAIN_NAME} # For MinIO console if accessed via Nginx
    command: server /data --console-address ":9090"
    volumes:
      - minio_data_prod:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  minio-init:
    image: quay.io/minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadminpassword};
      /usr/bin/mc mb myminio/classroom-uploads --ignore-existing;
      /usr/bin/mc policy set private myminio/classroom-uploads;
      echo '{"CORSRules":[{"AllowedOrigins":["https://*${DOMAIN_NAME}"],"AllowedMethods":["GET","PUT","POST"],"AllowedHeaders":["*"],"ExposeHeaders":["ETag"],"MaxAgeSeconds":3000}]}' > /tmp/cors.json;
      /usr/bin/mc cors set myminio/classroom-uploads /tmp/cors.json || echo 'CORS setup attempted for MinIO, continuing regardless of outcome';
      exit 0;
      "
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadminpassword}


  certbot:
    image: certbot/certbot
    container_name: classroom-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped

volumes:
  postgres_data_prod:
  minio_data_prod:
  certbot_certs:
  certbot_www:
