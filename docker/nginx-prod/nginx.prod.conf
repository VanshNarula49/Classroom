server {
    listen 80;
    server_name ${NGINX_DOMAIN} www.${NGINX_DOMAIN};

    # Handle Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Redirect HTTP to HTTPS (only if SSL is available)
    location / {
        if ($host = www.${NGINX_DOMAIN}) {
            return 301 https://${NGINX_DOMAIN}$request_uri;
        }
        if ($host = ${NGINX_DOMAIN}) {
            return 301 https://$host$request_uri;
        }
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${NGINX_DOMAIN} www.${NGINX_DOMAIN};

    # SSL Certificate paths
    ssl_certificate /etc/letsencrypt/live/${NGINX_DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${NGINX_DOMAIN}/privkey.pem;

    # Modern SSL/TLS configuration (inline instead of include)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Generate DH params if they don't exist, otherwise use them
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; object-src 'none'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    root /usr/share/nginx/html/frontend;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://api:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;
        proxy_request_buffering off;
        client_max_body_size 100M;
    }

    location /minio/ {
        rewrite ^/minio/(.*) /$1 break;
        proxy_pass http://minio:9000;
        proxy_set_header Host $http_host; # Important for MinIO to correctly interpret the host
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Amz-Content-Sha256 $http_x_amz_content_sha256;
        proxy_set_header X-Amz-Date $http_x_amz_date;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Forwarded-Host $host; # Ensure MinIO knows the original host for presigned URLs

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
        client_max_body_size 100M; # Adjust as needed

        # Allow MinIO to handle its own CORS if needed, or manage strictly here
        # add_header 'Access-Control-Allow-Origin' 'https://${NGINX_DOMAIN}' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, OPTIONS' always;
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Amz-*' always;
        # add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,ETag' always;

        # if ($request_method = 'OPTIONS') {
        #     add_header 'Access-Control-Allow-Origin' 'https://${NGINX_DOMAIN}';
        #     add_header 'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, OPTIONS';
        #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Amz-*' always;
        #     add_header 'Access-Control-Max-Age' 1728000;
        #     add_header 'Content-Type' 'text/plain charset=UTF-8';
        #     add_header 'Content-Length' 0;
        #     return 204;
        # }
    }

    # Static files caching (adjust paths if your build process differs)
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|woff2|woff|ttf|otf)$ {
        expires 1y;
        access_log off;
        add_header Cache-Control "public, immutable";
    }

    # Brotli and Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # Brotli compression removed - not available in standard nginx image
    # If you need brotli, use nginx:alpine-brotli or build custom image

    # Hide Nginx version
    server_tokens off;
}
